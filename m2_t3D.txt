#include <iostream>
#include <thread>
#include <mutex>
#include <chrono>
#include <queue>
#include <unordered_map>
#include <tuple>
#include <condition_variable>

std::mutex mtx;
std::condition_variable cv;
bool ready = false;

class TrafficProducer {
public:
    TrafficProducer(std::unordered_map<int, std::string> traffic_signals, std::queue<std::tuple<double, int, int, std::string>>& data_queue)
        : traffic_signals(traffic_signals), data_queue(data_queue), running(true) {}

    void operator()() {
        while (running) {
            for (const auto& [signal_id, signal_name] : traffic_signals) {
                double timestamp = std::chrono::duration_cast<std::chrono::seconds>(std::chrono::system_clock::now().time_since_epoch()).count();
                int cars_passed = generate_traffic_data(signal_id);
                std::tuple<double, int, int, std::string> data = std::make_tuple(timestamp, signal_id, cars_passed, signal_name);
                {
                    std::lock_guard<std::mutex> lock(mtx);
                    data_queue.push(data);
                    cv.notify_one();
                }
                std::cout << "Initiate: Traffic light ID: " << signal_id << ", Signal Name: " << signal_name << ", Timestamp: " << timestamp << ", Number of Cars Passed: " << cars_passed << std::endl;
                std::this_thread::sleep_for(std::chrono::minutes(5)); // Wait for 5 minutes
            }
        }
    }

    void stop() {
        running = false;
    }

private:
    std::unordered_map<int, std::string> traffic_signals;
    std::queue<std::tuple<double, int, int, std::string>>& data_queue;
    bool running;

    int generate_traffic_data(int signal_id) {
        // Simulating traffic data generation, replace with your logic
        return 5; // Example value
    }
};

class TrafficConsumer {
public:
    TrafficConsumer(std::queue<std::tuple<double, int, int, std::string>>& data_queue, int top_n)
        : data_queue(data_queue), top_n(top_n), running(true) {}

    void operator()() {
        while (running) {
            std::tuple<double, int, int, std::string> data;
            {
                std::unique_lock<std::mutex> lock(mtx);
                cv.wait(lock, [] { return ready; });
                if (!data_queue.empty()) {
                    data = data_queue.front();
                    data_queue.pop();
                }
            }
            double timestamp;
            int signal_id, cars_passed;
            std::string signal_name;
            std::tie(timestamp, signal_id, cars_passed, signal_name) = data;
            std::cout << "Consumed: Traffic light ID: " << signal_id << ", Signal Name: " << signal_name << ", Timestamp: " << timestamp << ", Cars Passed: " << cars_passed << std::endl;
            std::this_thread::sleep_for(std::chrono::seconds(1)); // Adjust sleep time as needed
        }
    }

    void stop() {
        running = false;
    }

private:
    std::queue<std::tuple<double, int, int, std::string>>& data_queue;
    int top_n;
    bool running;
};

int main() {
    std::unordered_map<int, std::string> traffic_signals = {
        {1, "Signal Red"},
        {2, "Signal Yellow"},
        {3, "Signal Green"}
    };
    int top_n = 2; 
    std::queue<std::tuple<double, int, int, std::string>> data_queue;

    TrafficProducer producer(traffic_signals, data_queue);
    TrafficConsumer consumer(data_queue, top_n);

    std::thread producer_thread(std::ref(producer));
    std::thread consumer_thread(std::ref(consumer));

    std::this_thread::sleep_for(std::chrono::seconds(35)); // Run the simulation for 30 seconds for demonstration purposes

    producer.stop();
    consumer.stop();

    producer_thread.join();
    consumer_thread.join();

    return 0;
}
